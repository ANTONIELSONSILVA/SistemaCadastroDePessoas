unit controlePessoas;

interface

uses
  System.SysUtils, modelPessoas, FireDAC.Comp.Client, Data.DB, IdHTTP, System.JSON,
   IdSSLOpenSSL, IdIOHandler, IdIOHandlerSocket, IdIOHandlerStack, Winapi.WinInet, Vcl.Dialogs;

type
  TControlePessoas = class
  private
    Model: TModelPessoas;
    function ValidarEmail(const Email: string): Boolean;
    function ConsultarViaCEP(const CEP: string): string;
    procedure BuscarCEP(CEP: string);
  public
    constructor Create;
    destructor Destroy; override; 
    function CadastrarPessoa(const Pessoa: TPessoa): Boolean;
    function EditarPessoa(const Pessoa: TPessoa): Boolean;
    function ExcluirPessoa(const ID: Integer): Boolean;
    function ListarPessoas(const Filtro: string = ''): TFDQuery;
    function ListarTodos: TFDQuery;
    function BuscarEnderecoPorCEP(const CEP: string): TPessoa;
  end;

implementation

uses
  RegularExpressions;

{ TControlePessoas }

constructor TControlePessoas.Create;
begin
  inherited Create;
  Model := TModelPessoas.Create;
end;

destructor TControlePessoas.Destroy;
begin
  Model.Free;
  inherited Destroy;
end;

function TControlePessoas.ValidarEmail(const Email: string): Boolean;
const
  EmailRegex = '^[\w.-]+@[\w.-]+\.[a-zA-Z]{2,}$';
begin
  Result := TRegEx.IsMatch(Email, EmailRegex);
end;




procedure BuscarCEP(CEP: string);
var
  URL: string;
  Resposta: string;
  JSON: TJSONObject;
begin
  URL := 'https://api.postmon.com.br/v1/cep/' + CEP;
  try
    // Chama a função GetHTTPResponse para obter o conteúdo da URL
    Resposta := GetHTTPResponse(URL);
    
    // Parseia a resposta JSON
    JSON := TJSONObject.ParseJSONValue(Resposta) as TJSONObject;
    if Assigned(JSON) then
    try
      // Exemplo: Mostra o JSON completo em um ShowMessage
      ShowMessage(JSON.ToString);
    finally
      JSON.Free;
    end
    else
      ShowMessage('Erro ao interpretar a resposta como JSON.');
  except
    on E: Exception do
      ShowMessage('Erro ao buscar o CEP: ' + E.Message);
  end;
end;

// Função para realizar requisição HTTP usando WinInet
function GetHTTPResponse(const URL: string): string;
var
  hSession, hConnect: HINTERNET;
  Buffer: array[0..1024] of AnsiChar;
  BytesRead: DWORD;
  Response: TStringStream;
begin
  Result := '';
  hSession := InternetOpen('DelphiApp', INTERNET_OPEN_TYPE_PRECONFIG, nil, nil, 0);
  if hSession = nil then
    raise Exception.Create('Não foi possível iniciar a sessão HTTP.');
  try
    hConnect := InternetOpenUrl(hSession, PChar(URL), nil, 0, INTERNET_FLAG_RELOAD, 0);
    if hConnect = nil then
      raise Exception.Create('Não foi possível abrir a URL: ' + URL);
    try
      Response := TStringStream.Create('');
      try
        repeat
          InternetReadFile(hConnect, @Buffer, SizeOf(Buffer), BytesRead);
          if BytesRead > 0 then
            Response.Write(Buffer, BytesRead);
        until BytesRead = 0;
        Result := Response.DataString;
      finally
        Response.Free;
      end;
    finally
      InternetCloseHandle(hConnect);
    end;
  finally
    InternetCloseHandle(hSession);
  end;
end;

{
function TControlePessoas.ConsultarViaCEP(const CEP: string): string;
var
  HTTP: TIdHTTP;
  Response: string;
begin
  HTTP := TIdHTTP.Create(nil);
  try
    try
      Response := HTTP.Get('https://viacep.com.br/ws/' + CEP + '/json/');
      Result := Response;
    except
      on E: Exception do
        raise Exception.Create('Erro ao consultar o CEP: ' + E.Message);
    end;
  finally
    HTTP.Free;
  end;
end;
}

function TControlePessoas.CadastrarPessoa(const Pessoa: TPessoa): Boolean;
begin
  if not ValidarEmail(Pessoa.Email) then
    raise Exception.Create('E-mail inválido.');

  if not Model.ValidarCPFUnico(Pessoa.CPF) then
    raise Exception.Create('CPF já cadastrado.');

  Result := Model.InserirPessoa(Pessoa);
end;

function TControlePessoas.EditarPessoa(const Pessoa: TPessoa): Boolean;
begin
  if not ValidarEmail(Pessoa.Email) then
    raise Exception.Create('E-mail inválido.');

  Result := Model.AtualizarPessoa(Pessoa);
end;

function TControlePessoas.ExcluirPessoa(const ID: Integer): Boolean;
begin
  Result := Model.DeletarPessoa(ID);
end;

function TControlePessoas.ListarPessoas(const Filtro: string): TFDQuery;
begin
  Result := Model.BuscarPessoas(Filtro);
end;

function TControlePessoas.BuscarEnderecoPorCEP(const CEP: string): TPessoa;
var
  JSONResponse: TJSONObject;
  JSONData: string;
begin
  JSONData := BuscarCEP(CEP);
  JSONResponse := TJSONObject.ParseJSONValue(JSONData) as TJSONObject;
  try
    if JSONResponse.GetValue<string>('erro') = 'true' then
      raise Exception.Create('CEP inválido.');

    Result.Logradouro := JSONResponse.GetValue<string>('logradouro');
    Result.Bairro := JSONResponse.GetValue<string>('bairro');
    Result.Cidade := JSONResponse.GetValue<string>('localidade');
    Result.Estado := JSONResponse.GetValue<string>('uf');
  finally
    JSONResponse.Free;
  end;
end;

function TControlePessoas.ListarTodos: TFDQuery;
begin
  Result := Model.BuscarTodos;
end;


end.

