unit DMConexao;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.VCLUI.Wait,
  Data.DB, FireDAC.Comp.Client, Vcl.Dialogs;

type
  TDataModuleConexao = class(TDataModule)
  FDConexao: TFDConnection;
  private
    { Private declarations }
    procedure ConectarBanco;
    procedure CarregaConfigurarConexaoSQLite;

  public
    { Public declarations }
     function retornaConexaoBancoSQLlite: TFDConnection;
  end;

var
  DataModuleConexao: TDataModuleConexao;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}



function TDataModuleConexao.retornaConexaoBancoSQLlite: TFDConnection;
begin
  Result := FDConexao;
end;


procedure TDataModuleConexao.ConectarBanco;
begin
  try
    CarregaConfigurarConexaoSQLite;
    FDConexao.Open;
    MessageDlg('Conexão com o banco de dados SQLite foi aberta com sucesso!', mtInformation, [mbOK], 0);
  except
    on E: Exception do
    begin
      MessageDlg('Erro ao conectar ao banco SQLite: ' + E.Message, mtError, [mbOK], 0);
      raise;
    end;
  end;
end;


procedure TDataModuleConexao.CarregaConfigurarConexaoSQLite();
var
  ArquivoBanco: string;

begin

    // Construindo o caminho completo para o banco de dados
    ArquivoBanco := ExtractFilePath(ParamStr(0)) + 'dataBase.db';

    // Configurando parâmetros da conexão
    FDConexao.Close; // Fecha conexão anterior, se existir
    FDConexao.Params.Clear;
    FDConexao.DriverName := 'SQLite';
    FDConexao.Params.Add('Database=' + ArquivoBanco);
    FDConexao.Params.Add('OpenMode=ReadWrite'); // ReadWrite ou CreateUTF8 se necessário
    FDConexao.Params.Add('LockingMode=Normal');
    FDConexao.Params.Add('Synchronous=Normal');

end;

end.
